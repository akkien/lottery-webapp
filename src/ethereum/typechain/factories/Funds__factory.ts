/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Funds, FundsInterface } from "../Funds";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "mes",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "random",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "claimers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_hashes",
        type: "bytes32[]",
      },
    ],
    name: "topUp",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "validHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260056080819052640332e302e360dc1b60a0908152610026916002919061008a565b5034801561003357600080fd5b50604051610ae6380380610ae683398101604081905261005291610123565b600080546001600160a01b0319166001600160a01b03841617905561007f81670de0b6b3a764000061015d565b600155506101c59050565b8280546100969061018a565b90600052602060002090601f0160209004810192826100b857600085556100fe565b82601f106100d157805160ff19168380011785556100fe565b828001600101855582156100fe579182015b828111156100fe5782518255916020019190600101906100e3565b5061010a92915061010e565b5090565b5b8082111561010a576000815560010161010f565b6000806040838503121561013657600080fd5b82516001600160a01b038116811461014d57600080fd5b6020939093015192949293505050565b600081600019048311821515161561018557634e487b7160e01b600052601160045260246000fd5b500290565b600181811c9082168061019e57607f821691505b602082108114156101bf57634e487b7160e01b600052602260045260246000fd5b50919050565b610912806101d46000396000f3fe6080604052600436106100915760003560e01c8063b89c395211610059578063b89c3952146101a2578063ce1b815f146101d2578063dd08634d146101f0578063e1fa8e8414610205578063e64d2fb41461022557600080fd5b8063486ff0cd14610096578063572b6c05146100c15780637197029b146101005780639d22525614610130578063aa8c217c1461017e575b600080fd5b3480156100a257600080fd5b506100ab610245565b6040516100b89190610677565b60405180910390f35b3480156100cd57600080fd5b506100f06100dc3660046106cc565b6000546001600160a01b0391821691161490565b60405190151581526020016100b8565b34801561010c57600080fd5b506100f061011b3660046106fc565b60056020526000908152604090205460ff1681565b34801561013c57600080fd5b5061016661014b3660046106fc565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b34801561018a57600080fd5b5061019460015481565b6040519081526020016100b8565b3480156101ae57600080fd5b506100f06101bd3660046106fc565b60046020526000908152604090205460ff1681565b3480156101de57600080fd5b506000546001600160a01b0316610166565b6102036101fe366004610715565b6102d3565b005b34801561021157600080fd5b506102036102203660046106fc565b610426565b34801561023157600080fd5b5061020361024036600461078a565b610508565b6002805461025290610802565b80601f016020809104026020016040519081016040528092919081815260200182805461027e90610802565b80156102cb5780601f106102a0576101008083540402835291602001916102cb565b820191906000526020600020905b8154815290600101906020018083116102ae57829003601f168201915b505050505081565b806103155760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b60448201526064015b60405180910390fd5b6001546103229082610853565b34146103675760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081d1bdc1d5c08185b5bdd5b9d60621b604482015260640161030c565b60005b8181101561042157600083838381811061038657610386610872565b9050602002013514156103ca5760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b604482015260640161030c565b6001600560008585858181106103e2576103e2610872565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061041990610888565b91505061036a565b505050565b6000818152600360205260409020546001600160a01b0316156104805760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b604482015260640161030c565b60008181526005602052604090205460ff1615156001146104d25760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b604482015260640161030c565b6104da610643565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000610512610643565b9050600084848460405160200161052b939291906108a3565b60408051601f1981840301815291815281516020928301206000818152600490935291205490915060ff16156105955760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b604482015260640161030c565b6000818152600360205260409020546001600160a01b038381169116146105ea5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b604482015260640161030c565b600081815260046020526040808220805460ff191660019081179091555490516001600160a01b0385169282156108fc02929190818181858888f1935050505015801561063b573d6000803e3d6000fd5b505050505050565b60006014361080159061066057506000546001600160a01b031633145b15610672575060131936013560601c90565b503390565b600060208083528351808285015260005b818110156106a457858101830151858201604001528201610688565b818111156106b6576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156106de57600080fd5b81356001600160a01b03811681146106f557600080fd5b9392505050565b60006020828403121561070e57600080fd5b5035919050565b6000806020838503121561072857600080fd5b823567ffffffffffffffff8082111561074057600080fd5b818501915085601f83011261075457600080fd5b81358181111561076357600080fd5b8660208260051b850101111561077857600080fd5b60209290920196919550909350505050565b60008060006040848603121561079f57600080fd5b833567ffffffffffffffff808211156107b757600080fd5b818601915086601f8301126107cb57600080fd5b8135818111156107da57600080fd5b8760208285010111156107ec57600080fd5b6020928301989097509590910135949350505050565b600181811c9082168061081657607f821691505b6020821081141561083757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561086d5761086d61083d565b500290565b634e487b7160e01b600052603260045260246000fd5b600060001982141561089c5761089c61083d565b5060010190565b604081528260408201528284606083013760006060848301015260006060601f19601f860116830101905082602083015294935050505056fea26469706673582212207c69063340dbb1cffe70fd044b333d7f106f67667de7316cdc7daad36d93f9c264736f6c63430008090033";

export class Funds__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    forwarder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Funds> {
    return super.deploy(forwarder, _amount, overrides || {}) as Promise<Funds>;
  }
  getDeployTransaction(
    forwarder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, _amount, overrides || {});
  }
  attach(address: string): Funds {
    return super.attach(address) as Funds;
  }
  connect(signer: Signer): Funds__factory {
    return super.connect(signer) as Funds__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundsInterface {
    return new utils.Interface(_abi) as FundsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Funds {
    return new Contract(address, _abi, signerOrProvider) as Funds;
  }
}
