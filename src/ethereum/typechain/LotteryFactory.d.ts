/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LotteryFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createLottery(address,uint256)": FunctionFragment;
    "getMyLotteries(address)": FunctionFragment;
    "lotteries(address,uint256)": FunctionFragment;
    "lottery(address)": FunctionFragment;
    "totalLottery()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createLottery",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyLotteries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lottery", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalLottery",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLottery",
    data: BytesLike
  ): Result;

  events: {
    "LotteryCreate(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LotteryCreate"): EventFragment;
}

export type LotteryCreateEvent = TypedEvent<
  [string, string, BigNumber] & {
    creator: string;
    paymentToken: string;
    price: BigNumber;
  }
>;

export class LotteryFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LotteryFactoryInterface;

  functions: {
    createLottery(
      paymentToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMyLotteries(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    lotteries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lottery(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        creator: string;
        paymentToken: string;
        price: BigNumber;
      }
    >;

    totalLottery(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createLottery(
    paymentToken: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMyLotteries(user: string, overrides?: CallOverrides): Promise<string[]>;

  lotteries(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  lottery(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      creator: string;
      paymentToken: string;
      price: BigNumber;
    }
  >;

  totalLottery(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createLottery(
      paymentToken: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMyLotteries(user: string, overrides?: CallOverrides): Promise<string[]>;

    lotteries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    lottery(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        creator: string;
        paymentToken: string;
        price: BigNumber;
      }
    >;

    totalLottery(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LotteryCreate(address,address,uint256)"(
      creator?: string | null,
      paymentToken?: string | null,
      price?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { creator: string; paymentToken: string; price: BigNumber }
    >;

    LotteryCreate(
      creator?: string | null,
      paymentToken?: string | null,
      price?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { creator: string; paymentToken: string; price: BigNumber }
    >;
  };

  estimateGas: {
    createLottery(
      paymentToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMyLotteries(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lotteries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lottery(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLottery(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createLottery(
      paymentToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMyLotteries(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lottery(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLottery(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
